// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot-fronius.proto

/*
Package iot_fronius is a generated protocol buffer package.

It is generated from these files:
	iot-fronius.proto

It has these top-level messages:
	SuccessResponse
	Powerflow
	SitePowerflow
	InverterPowerflow
	OhmpilotPowerflow
*/
package iot_fronius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SuccessResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SuccessResponse) Reset()                    { *m = SuccessResponse{} }
func (m *SuccessResponse) String() string            { return proto.CompactTextString(m) }
func (*SuccessResponse) ProtoMessage()               {}
func (*SuccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SuccessResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Powerflow struct {
	Site     *SitePowerflow       `protobuf:"bytes,1,opt,name=site" json:"site,omitempty"`
	Inverter []*InverterPowerflow `protobuf:"bytes,2,rep,name=inverter" json:"inverter,omitempty"`
	Ohmpilot []*OhmpilotPowerflow `protobuf:"bytes,3,rep,name=ohmpilot" json:"ohmpilot,omitempty"`
}

func (m *Powerflow) Reset()                    { *m = Powerflow{} }
func (m *Powerflow) String() string            { return proto.CompactTextString(m) }
func (*Powerflow) ProtoMessage()               {}
func (*Powerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Powerflow) GetSite() *SitePowerflow {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *Powerflow) GetInverter() []*InverterPowerflow {
	if m != nil {
		return m.Inverter
	}
	return nil
}

func (m *Powerflow) GetOhmpilot() []*OhmpilotPowerflow {
	if m != nil {
		return m.Ohmpilot
	}
	return nil
}

type SitePowerflow struct {
	Mode                    string  `protobuf:"bytes,1,opt,name=mode" json:"mode,omitempty"`
	BatteryStandby          bool    `protobuf:"varint,2,opt,name=batteryStandby" json:"batteryStandby,omitempty"`
	BackupMode              bool    `protobuf:"varint,3,opt,name=backupMode" json:"backupMode,omitempty"`
	PowerFromGrid           float64 `protobuf:"fixed64,4,opt,name=powerFromGrid" json:"powerFromGrid,omitempty"`
	PowerLoad               float64 `protobuf:"fixed64,5,opt,name=powerLoad" json:"powerLoad,omitempty"`
	PowerAkku               float64 `protobuf:"fixed64,6,opt,name=powerAkku" json:"powerAkku,omitempty"`
	PowerFromPv             float64 `protobuf:"fixed64,7,opt,name=powerFromPv" json:"powerFromPv,omitempty"`
	RelativeSelfConsumption uint32  `protobuf:"varint,8,opt,name=relativeSelfConsumption" json:"relativeSelfConsumption,omitempty"`
	RelativeAutonomy        uint32  `protobuf:"varint,9,opt,name=relativeAutonomy" json:"relativeAutonomy,omitempty"`
	MeterLocation           string  `protobuf:"bytes,10,opt,name=meterLocation" json:"meterLocation,omitempty"`
	EnergyDay               float64 `protobuf:"fixed64,11,opt,name=energyDay" json:"energyDay,omitempty"`
	EnergyYear              float64 `protobuf:"fixed64,12,opt,name=energyYear" json:"energyYear,omitempty"`
	EnergyTotal             float64 `protobuf:"fixed64,13,opt,name=energyTotal" json:"energyTotal,omitempty"`
}

func (m *SitePowerflow) Reset()                    { *m = SitePowerflow{} }
func (m *SitePowerflow) String() string            { return proto.CompactTextString(m) }
func (*SitePowerflow) ProtoMessage()               {}
func (*SitePowerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SitePowerflow) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *SitePowerflow) GetBatteryStandby() bool {
	if m != nil {
		return m.BatteryStandby
	}
	return false
}

func (m *SitePowerflow) GetBackupMode() bool {
	if m != nil {
		return m.BackupMode
	}
	return false
}

func (m *SitePowerflow) GetPowerFromGrid() float64 {
	if m != nil {
		return m.PowerFromGrid
	}
	return 0
}

func (m *SitePowerflow) GetPowerLoad() float64 {
	if m != nil {
		return m.PowerLoad
	}
	return 0
}

func (m *SitePowerflow) GetPowerAkku() float64 {
	if m != nil {
		return m.PowerAkku
	}
	return 0
}

func (m *SitePowerflow) GetPowerFromPv() float64 {
	if m != nil {
		return m.PowerFromPv
	}
	return 0
}

func (m *SitePowerflow) GetRelativeSelfConsumption() uint32 {
	if m != nil {
		return m.RelativeSelfConsumption
	}
	return 0
}

func (m *SitePowerflow) GetRelativeAutonomy() uint32 {
	if m != nil {
		return m.RelativeAutonomy
	}
	return 0
}

func (m *SitePowerflow) GetMeterLocation() string {
	if m != nil {
		return m.MeterLocation
	}
	return ""
}

func (m *SitePowerflow) GetEnergyDay() float64 {
	if m != nil {
		return m.EnergyDay
	}
	return 0
}

func (m *SitePowerflow) GetEnergyYear() float64 {
	if m != nil {
		return m.EnergyYear
	}
	return 0
}

func (m *SitePowerflow) GetEnergyTotal() float64 {
	if m != nil {
		return m.EnergyTotal
	}
	return 0
}

type InverterPowerflow struct {
	BatteryMode  string  `protobuf:"bytes,1,opt,name=batteryMode" json:"batteryMode,omitempty"`
	DeviceType   uint32  `protobuf:"varint,2,opt,name=deviceType" json:"deviceType,omitempty"`
	EnergyDay    float64 `protobuf:"fixed64,3,opt,name=energyDay" json:"energyDay,omitempty"`
	EnergyYear   float64 `protobuf:"fixed64,4,opt,name=energyYear" json:"energyYear,omitempty"`
	EnergyTotal  float64 `protobuf:"fixed64,5,opt,name=energyTotal" json:"energyTotal,omitempty"`
	CurrentPower float64 `protobuf:"fixed64,6,opt,name=currentPower" json:"currentPower,omitempty"`
	Soc          uint32  `protobuf:"varint,7,opt,name=soc" json:"soc,omitempty"`
}

func (m *InverterPowerflow) Reset()                    { *m = InverterPowerflow{} }
func (m *InverterPowerflow) String() string            { return proto.CompactTextString(m) }
func (*InverterPowerflow) ProtoMessage()               {}
func (*InverterPowerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InverterPowerflow) GetBatteryMode() string {
	if m != nil {
		return m.BatteryMode
	}
	return ""
}

func (m *InverterPowerflow) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyDay() float64 {
	if m != nil {
		return m.EnergyDay
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyYear() float64 {
	if m != nil {
		return m.EnergyYear
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyTotal() float64 {
	if m != nil {
		return m.EnergyTotal
	}
	return 0
}

func (m *InverterPowerflow) GetCurrentPower() float64 {
	if m != nil {
		return m.CurrentPower
	}
	return 0
}

func (m *InverterPowerflow) GetSoc() uint32 {
	if m != nil {
		return m.Soc
	}
	return 0
}

type OhmpilotPowerflow struct {
	PowerAcTotal float64 `protobuf:"fixed64,1,opt,name=PowerAcTotal" json:"PowerAcTotal,omitempty"`
	State        string  `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Temperature  float64 `protobuf:"fixed64,3,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *OhmpilotPowerflow) Reset()                    { *m = OhmpilotPowerflow{} }
func (m *OhmpilotPowerflow) String() string            { return proto.CompactTextString(m) }
func (*OhmpilotPowerflow) ProtoMessage()               {}
func (*OhmpilotPowerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OhmpilotPowerflow) GetPowerAcTotal() float64 {
	if m != nil {
		return m.PowerAcTotal
	}
	return 0
}

func (m *OhmpilotPowerflow) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *OhmpilotPowerflow) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*SuccessResponse)(nil), "iot_fronius.SuccessResponse")
	proto.RegisterType((*Powerflow)(nil), "iot_fronius.Powerflow")
	proto.RegisterType((*SitePowerflow)(nil), "iot_fronius.SitePowerflow")
	proto.RegisterType((*InverterPowerflow)(nil), "iot_fronius.InverterPowerflow")
	proto.RegisterType((*OhmpilotPowerflow)(nil), "iot_fronius.OhmpilotPowerflow")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Fronius service

type FroniusClient interface {
	InsertCurrentDataPowerflow(ctx context.Context, in *Powerflow, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type froniusClient struct {
	cc *grpc.ClientConn
}

func NewFroniusClient(cc *grpc.ClientConn) FroniusClient {
	return &froniusClient{cc}
}

func (c *froniusClient) InsertCurrentDataPowerflow(ctx context.Context, in *Powerflow, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentDataPowerflow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fronius service

type FroniusServer interface {
	InsertCurrentDataPowerflow(context.Context, *Powerflow) (*SuccessResponse, error)
}

func RegisterFroniusServer(s *grpc.Server, srv FroniusServer) {
	s.RegisterService(&_Fronius_serviceDesc, srv)
}

func _Fronius_InsertCurrentDataPowerflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Powerflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentDataPowerflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentDataPowerflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentDataPowerflow(ctx, req.(*Powerflow))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fronius_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iot_fronius.Fronius",
	HandlerType: (*FroniusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCurrentDataPowerflow",
			Handler:    _Fronius_InsertCurrentDataPowerflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot-fronius.proto",
}

func init() { proto.RegisterFile("iot-fronius.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 578 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x5f, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0x51, 0x64, 0xc7, 0xf6, 0x38, 0x6a, 0xe2, 0xa5, 0xa4, 0x8b, 0x09, 0xc1, 0x88, 0x52,
	0x4c, 0x4b, 0x05, 0x75, 0x5f, 0x4a, 0xdf, 0x9c, 0x84, 0x04, 0x43, 0x43, 0x8d, 0xec, 0x97, 0x3e,
	0x94, 0xb2, 0x96, 0xc7, 0xa9, 0xb0, 0xa5, 0x15, 0xab, 0x95, 0x83, 0xae, 0xd3, 0x2b, 0xf4, 0x38,
	0x3d, 0x42, 0x2f, 0x51, 0x76, 0x57, 0x96, 0xa5, 0xba, 0x7f, 0xde, 0x34, 0xbf, 0xf9, 0x66, 0xf6,
	0x1b, 0x8d, 0xb4, 0xd0, 0x0b, 0xb9, 0x7c, 0xbd, 0x12, 0x3c, 0x0e, 0xb3, 0xd4, 0x4b, 0x04, 0x97,
	0x9c, 0x74, 0x43, 0x2e, 0xbf, 0x14, 0xc8, 0x7d, 0x05, 0xa7, 0xb3, 0x2c, 0x08, 0x30, 0x4d, 0x7d,
	0x4c, 0x13, 0x1e, 0xa7, 0x48, 0x28, 0xb4, 0x52, 0x83, 0xa8, 0x35, 0xb0, 0x86, 0x6d, 0x7f, 0x17,
	0xba, 0xdf, 0x2d, 0xe8, 0x4c, 0xf9, 0x23, 0x8a, 0xd5, 0x86, 0x3f, 0x12, 0x0f, 0x1a, 0x69, 0x28,
	0x51, 0x8b, 0xba, 0xa3, 0xbe, 0x57, 0x69, 0xeb, 0xcd, 0x42, 0x89, 0xa5, 0xd2, 0xd7, 0x3a, 0xf2,
	0x1e, 0xda, 0x61, 0xbc, 0x45, 0x21, 0x51, 0xd0, 0xa3, 0x81, 0x3d, 0xec, 0x8e, 0x2e, 0x6b, 0x35,
	0x93, 0x22, 0xb9, 0xaf, 0x2b, 0xf5, 0xaa, 0x96, 0x7f, 0x8d, 0x92, 0x70, 0xc3, 0x25, 0xb5, 0xff,
	0x50, 0xfb, 0xb1, 0x48, 0x56, 0x6a, 0x77, 0x7a, 0xf7, 0x87, 0x0d, 0x4e, 0xcd, 0x0f, 0x21, 0xd0,
	0x88, 0xf8, 0xd2, 0x38, 0xef, 0xf8, 0xfa, 0x99, 0xbc, 0x80, 0x27, 0x0b, 0x26, 0x25, 0x8a, 0x7c,
	0x26, 0x59, 0xbc, 0x5c, 0xe4, 0xf4, 0x48, 0x0f, 0xff, 0x1b, 0x25, 0x97, 0x00, 0x0b, 0x16, 0xac,
	0xb3, 0xe4, 0x5e, 0x75, 0xb0, 0xb5, 0xa6, 0x42, 0xc8, 0x73, 0x70, 0x12, 0x75, 0xd0, 0xad, 0xe0,
	0xd1, 0x9d, 0x08, 0x97, 0xb4, 0x31, 0xb0, 0x86, 0x96, 0x5f, 0x87, 0xe4, 0x02, 0x3a, 0x1a, 0x7c,
	0xe0, 0x6c, 0x49, 0x9b, 0x5a, 0xb1, 0x07, 0x65, 0x76, 0xbc, 0x5e, 0x67, 0xf4, 0xb8, 0x92, 0x55,
	0x80, 0x0c, 0xa0, 0x5b, 0x36, 0x9b, 0x6e, 0x69, 0x4b, 0xe7, 0xab, 0x88, 0xbc, 0x83, 0x67, 0x02,
	0x37, 0x4c, 0x86, 0x5b, 0x9c, 0xe1, 0x66, 0x75, 0xcd, 0xe3, 0x34, 0x8b, 0x12, 0x19, 0xf2, 0x98,
	0xb6, 0x07, 0xd6, 0xd0, 0xf1, 0xff, 0x96, 0x26, 0x2f, 0xe1, 0x6c, 0x97, 0x1a, 0x67, 0x92, 0xc7,
	0x3c, 0xca, 0x69, 0x47, 0x97, 0x1c, 0x70, 0x35, 0x69, 0x84, 0x52, 0x59, 0x0e, 0x98, 0xee, 0x0d,
	0xfa, 0x75, 0xd6, 0xa1, 0x9a, 0x05, 0x63, 0x14, 0x0f, 0xf9, 0x0d, 0xcb, 0x69, 0xd7, 0xcc, 0x52,
	0x02, 0xf5, 0x36, 0x4d, 0xf0, 0x09, 0x99, 0xa0, 0x27, 0x3a, 0x5d, 0x21, 0x6a, 0x56, 0x13, 0xcd,
	0xb9, 0x64, 0x1b, 0xea, 0x98, 0x59, 0x2b, 0xc8, 0xfd, 0x69, 0x41, 0xef, 0xe0, 0xcb, 0x51, 0x75,
	0xc5, 0xde, 0xee, 0xf7, 0x8b, 0xae, 0x22, 0x75, 0xf2, 0x12, 0xb7, 0x61, 0x80, 0xf3, 0x3c, 0x41,
	0xbd, 0x6b, 0xc7, 0xaf, 0x90, 0xba, 0x6f, 0xfb, 0xdf, 0xbe, 0x1b, 0xff, 0xf3, 0xdd, 0x3c, 0xf0,
	0x4d, 0x5c, 0x38, 0x09, 0x32, 0x21, 0x30, 0x36, 0xdf, 0x6c, 0xb1, 0xe6, 0x1a, 0x23, 0x67, 0x60,
	0xa7, 0x3c, 0xd0, 0x1b, 0x76, 0x7c, 0xf5, 0xe8, 0x72, 0xe8, 0x1d, 0x7c, 0xea, 0xaa, 0x95, 0x0e,
	0xc6, 0x81, 0x39, 0xcd, 0x32, 0xad, 0xaa, 0x8c, 0x3c, 0x85, 0x66, 0x2a, 0x99, 0x34, 0x93, 0x76,
	0x7c, 0x13, 0x28, 0x9b, 0x12, 0xa3, 0x04, 0x05, 0x93, 0x99, 0xc0, 0x62, 0xcc, 0x2a, 0x1a, 0x7d,
	0x86, 0xd6, 0xad, 0xf9, 0xc7, 0x88, 0x0f, 0xfd, 0x49, 0x9c, 0xa2, 0x90, 0xd7, 0xc6, 0xe3, 0x0d,
	0x93, 0x6c, 0x6f, 0xe2, 0xbc, 0xf6, 0x3f, 0x96, 0xbc, 0x7f, 0x51, 0xbf, 0x17, 0xea, 0x77, 0xcd,
	0xd5, 0x1b, 0x38, 0x0f, 0x78, 0xe4, 0xb1, 0x2d, 0x3e, 0x30, 0xae, 0x94, 0x5e, 0xa1, 0xbc, 0x3a,
	0x9d, 0x70, 0x59, 0x9c, 0x3c, 0x55, 0xd7, 0xd6, 0xd4, 0xfa, 0x76, 0x64, 0xfb, 0xf3, 0xbb, 0xc5,
	0xb1, 0xbe, 0xc5, 0xde, 0xfe, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x26, 0xa7, 0xc5, 0x27, 0xda, 0x04,
	0x00, 0x00,
}
