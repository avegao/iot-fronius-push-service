// Code generated by protoc-gen-go. DO NOT EDIT.
// source: iot-fronius.proto

/*
Package iot_fronius is a generated protocol buffer package.

It is generated from these files:
	iot-fronius.proto

It has these top-level messages:
	SuccessResponse
	Powerflow
	SitePowerflow
	InverterPowerflow
	OhmpilotPowerflow
	CurrentDataMeter
	MeterDetails
	CurrenDataMeterRequest
	CurrenDataInverterRequest
*/
package iot_fronius

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SuccessResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *SuccessResponse) Reset()                    { *m = SuccessResponse{} }
func (m *SuccessResponse) String() string            { return proto.CompactTextString(m) }
func (*SuccessResponse) ProtoMessage()               {}
func (*SuccessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SuccessResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type Powerflow struct {
	Site     *SitePowerflow       `protobuf:"bytes,1,opt,name=site" json:"site,omitempty"`
	Inverter []*InverterPowerflow `protobuf:"bytes,2,rep,name=inverter" json:"inverter,omitempty"`
	Ohmpilot []*OhmpilotPowerflow `protobuf:"bytes,3,rep,name=ohmpilot" json:"ohmpilot,omitempty"`
}

func (m *Powerflow) Reset()                    { *m = Powerflow{} }
func (m *Powerflow) String() string            { return proto.CompactTextString(m) }
func (*Powerflow) ProtoMessage()               {}
func (*Powerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Powerflow) GetSite() *SitePowerflow {
	if m != nil {
		return m.Site
	}
	return nil
}

func (m *Powerflow) GetInverter() []*InverterPowerflow {
	if m != nil {
		return m.Inverter
	}
	return nil
}

func (m *Powerflow) GetOhmpilot() []*OhmpilotPowerflow {
	if m != nil {
		return m.Ohmpilot
	}
	return nil
}

type SitePowerflow struct {
	Mode                    string  `protobuf:"bytes,1,opt,name=mode" json:"mode,omitempty"`
	BatteryStandby          bool    `protobuf:"varint,2,opt,name=batteryStandby" json:"batteryStandby,omitempty"`
	BackupMode              bool    `protobuf:"varint,3,opt,name=backupMode" json:"backupMode,omitempty"`
	PowerFromGrid           float64 `protobuf:"fixed64,4,opt,name=powerFromGrid" json:"powerFromGrid,omitempty"`
	PowerLoad               float64 `protobuf:"fixed64,5,opt,name=powerLoad" json:"powerLoad,omitempty"`
	PowerAkku               float64 `protobuf:"fixed64,6,opt,name=powerAkku" json:"powerAkku,omitempty"`
	PowerFromPv             float64 `protobuf:"fixed64,7,opt,name=powerFromPv" json:"powerFromPv,omitempty"`
	RelativeSelfConsumption uint32  `protobuf:"varint,8,opt,name=relativeSelfConsumption" json:"relativeSelfConsumption,omitempty"`
	RelativeAutonomy        uint32  `protobuf:"varint,9,opt,name=relativeAutonomy" json:"relativeAutonomy,omitempty"`
	MeterLocation           string  `protobuf:"bytes,10,opt,name=meterLocation" json:"meterLocation,omitempty"`
	EnergyDay               float64 `protobuf:"fixed64,11,opt,name=energyDay" json:"energyDay,omitempty"`
	EnergyYear              float64 `protobuf:"fixed64,12,opt,name=energyYear" json:"energyYear,omitempty"`
	EnergyTotal             float64 `protobuf:"fixed64,13,opt,name=energyTotal" json:"energyTotal,omitempty"`
}

func (m *SitePowerflow) Reset()                    { *m = SitePowerflow{} }
func (m *SitePowerflow) String() string            { return proto.CompactTextString(m) }
func (*SitePowerflow) ProtoMessage()               {}
func (*SitePowerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SitePowerflow) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *SitePowerflow) GetBatteryStandby() bool {
	if m != nil {
		return m.BatteryStandby
	}
	return false
}

func (m *SitePowerflow) GetBackupMode() bool {
	if m != nil {
		return m.BackupMode
	}
	return false
}

func (m *SitePowerflow) GetPowerFromGrid() float64 {
	if m != nil {
		return m.PowerFromGrid
	}
	return 0
}

func (m *SitePowerflow) GetPowerLoad() float64 {
	if m != nil {
		return m.PowerLoad
	}
	return 0
}

func (m *SitePowerflow) GetPowerAkku() float64 {
	if m != nil {
		return m.PowerAkku
	}
	return 0
}

func (m *SitePowerflow) GetPowerFromPv() float64 {
	if m != nil {
		return m.PowerFromPv
	}
	return 0
}

func (m *SitePowerflow) GetRelativeSelfConsumption() uint32 {
	if m != nil {
		return m.RelativeSelfConsumption
	}
	return 0
}

func (m *SitePowerflow) GetRelativeAutonomy() uint32 {
	if m != nil {
		return m.RelativeAutonomy
	}
	return 0
}

func (m *SitePowerflow) GetMeterLocation() string {
	if m != nil {
		return m.MeterLocation
	}
	return ""
}

func (m *SitePowerflow) GetEnergyDay() float64 {
	if m != nil {
		return m.EnergyDay
	}
	return 0
}

func (m *SitePowerflow) GetEnergyYear() float64 {
	if m != nil {
		return m.EnergyYear
	}
	return 0
}

func (m *SitePowerflow) GetEnergyTotal() float64 {
	if m != nil {
		return m.EnergyTotal
	}
	return 0
}

type InverterPowerflow struct {
	BatteryMode  string  `protobuf:"bytes,1,opt,name=batteryMode" json:"batteryMode,omitempty"`
	DeviceType   uint32  `protobuf:"varint,2,opt,name=deviceType" json:"deviceType,omitempty"`
	EnergyDay    float64 `protobuf:"fixed64,3,opt,name=energyDay" json:"energyDay,omitempty"`
	EnergyYear   float64 `protobuf:"fixed64,4,opt,name=energyYear" json:"energyYear,omitempty"`
	EnergyTotal  float64 `protobuf:"fixed64,5,opt,name=energyTotal" json:"energyTotal,omitempty"`
	CurrentPower float64 `protobuf:"fixed64,6,opt,name=currentPower" json:"currentPower,omitempty"`
	Soc          uint32  `protobuf:"varint,7,opt,name=soc" json:"soc,omitempty"`
}

func (m *InverterPowerflow) Reset()                    { *m = InverterPowerflow{} }
func (m *InverterPowerflow) String() string            { return proto.CompactTextString(m) }
func (*InverterPowerflow) ProtoMessage()               {}
func (*InverterPowerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *InverterPowerflow) GetBatteryMode() string {
	if m != nil {
		return m.BatteryMode
	}
	return ""
}

func (m *InverterPowerflow) GetDeviceType() uint32 {
	if m != nil {
		return m.DeviceType
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyDay() float64 {
	if m != nil {
		return m.EnergyDay
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyYear() float64 {
	if m != nil {
		return m.EnergyYear
	}
	return 0
}

func (m *InverterPowerflow) GetEnergyTotal() float64 {
	if m != nil {
		return m.EnergyTotal
	}
	return 0
}

func (m *InverterPowerflow) GetCurrentPower() float64 {
	if m != nil {
		return m.CurrentPower
	}
	return 0
}

func (m *InverterPowerflow) GetSoc() uint32 {
	if m != nil {
		return m.Soc
	}
	return 0
}

type OhmpilotPowerflow struct {
	PowerAcTotal float64 `protobuf:"fixed64,1,opt,name=powerAcTotal" json:"powerAcTotal,omitempty"`
	State        string  `protobuf:"bytes,2,opt,name=state" json:"state,omitempty"`
	Temperature  float64 `protobuf:"fixed64,3,opt,name=temperature" json:"temperature,omitempty"`
}

func (m *OhmpilotPowerflow) Reset()                    { *m = OhmpilotPowerflow{} }
func (m *OhmpilotPowerflow) String() string            { return proto.CompactTextString(m) }
func (*OhmpilotPowerflow) ProtoMessage()               {}
func (*OhmpilotPowerflow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *OhmpilotPowerflow) GetPowerAcTotal() float64 {
	if m != nil {
		return m.PowerAcTotal
	}
	return 0
}

func (m *OhmpilotPowerflow) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *OhmpilotPowerflow) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

type CurrentDataMeter struct {
	CurrentAcPhase1                   float64       `protobuf:"fixed64,1,opt,name=currentAcPhase1" json:"currentAcPhase1,omitempty"`
	CurrentAcPhase2                   float64       `protobuf:"fixed64,2,opt,name=currentAcPhase2" json:"currentAcPhase2,omitempty"`
	CurrentAcPhase3                   float64       `protobuf:"fixed64,3,opt,name=currentAcPhase3" json:"currentAcPhase3,omitempty"`
	CurrentAcSum                      float64       `protobuf:"fixed64,4,opt,name=currentAcSum" json:"currentAcSum,omitempty"`
	MeterDetails                      *MeterDetails `protobuf:"bytes,5,opt,name=meterDetails" json:"meterDetails,omitempty"`
	Enable                            bool          `protobuf:"varint,6,opt,name=enable" json:"enable,omitempty"`
	EnergyReactiveVArAcPhase1Consumed uint32        `protobuf:"varint,7,opt,name=energyReactiveVArAcPhase1Consumed" json:"energyReactiveVArAcPhase1Consumed,omitempty"`
	EnergyReactiveVArAcPhase1Produced uint32        `protobuf:"varint,8,opt,name=energyReactiveVArAcPhase1Produced" json:"energyReactiveVArAcPhase1Produced,omitempty"`
	EnergyReactiveVArAcPhase2Consumed uint32        `protobuf:"varint,9,opt,name=energyReactiveVArAcPhase2Consumed" json:"energyReactiveVArAcPhase2Consumed,omitempty"`
	EnergyReactiveVArAcPhase2Produced uint32        `protobuf:"varint,10,opt,name=energyReactiveVArAcPhase2Produced" json:"energyReactiveVArAcPhase2Produced,omitempty"`
	EnergyReactiveVArAcPhase3Consumed uint32        `protobuf:"varint,11,opt,name=energyReactiveVArAcPhase3Consumed" json:"energyReactiveVArAcPhase3Consumed,omitempty"`
	EnergyReactiveVArAcPhase3Produced uint32        `protobuf:"varint,12,opt,name=energyReactiveVArAcPhase3Produced" json:"energyReactiveVArAcPhase3Produced,omitempty"`
	EnergyReactiveVArAcSumConsumed    uint32        `protobuf:"varint,13,opt,name=energyReactiveVArAcSumConsumed" json:"energyReactiveVArAcSumConsumed,omitempty"`
	EnergyReactiveVArAcSumProduced    uint32        `protobuf:"varint,14,opt,name=energyReactiveVArAcSumProduced" json:"energyReactiveVArAcSumProduced,omitempty"`
	EnergyRealWAcMinusAbsolute        uint32        `protobuf:"varint,15,opt,name=energyRealWAcMinusAbsolute" json:"energyRealWAcMinusAbsolute,omitempty"`
	EnergyRealWAcPhase1Consumed       uint32        `protobuf:"varint,16,opt,name=energyRealWAcPhase1Consumed" json:"energyRealWAcPhase1Consumed,omitempty"`
	EnergyRealWAcPhase1Produced       uint32        `protobuf:"varint,17,opt,name=energyRealWAcPhase1Produced" json:"energyRealWAcPhase1Produced,omitempty"`
	EnergyRealWAcPhase2Consumed       uint32        `protobuf:"varint,18,opt,name=energyRealWAcPhase2Consumed" json:"energyRealWAcPhase2Consumed,omitempty"`
	EnergyRealWAcPhase2Produced       uint32        `protobuf:"varint,19,opt,name=energyRealWAcPhase2Produced" json:"energyRealWAcPhase2Produced,omitempty"`
	EnergyRealWAcPhase3Consumed       uint32        `protobuf:"varint,20,opt,name=energyRealWAcPhase3Consumed" json:"energyRealWAcPhase3Consumed,omitempty"`
	EnergyRealWAcPhase3Produced       uint32        `protobuf:"varint,21,opt,name=energyRealWAcPhase3Produced" json:"energyRealWAcPhase3Produced,omitempty"`
	EnergyRealWAcSumConsumed          uint32        `protobuf:"varint,22,opt,name=energyRealWAcSumConsumed" json:"energyRealWAcSumConsumed,omitempty"`
	EnergyRealWAcSumProduced          uint32        `protobuf:"varint,23,opt,name=energyRealWAcSumProduced" json:"energyRealWAcSumProduced,omitempty"`
	FrequencyPhaseAverage             float64       `protobuf:"fixed64,24,opt,name=frequencyPhaseAverage" json:"frequencyPhaseAverage,omitempty"`
	MeterLocationCurrent              uint32        `protobuf:"varint,25,opt,name=meterLocationCurrent" json:"meterLocationCurrent,omitempty"`
	PowerApparentSPhase1              float64       `protobuf:"fixed64,26,opt,name=powerApparentSPhase1" json:"powerApparentSPhase1,omitempty"`
	PowerApparentSPhase2              float64       `protobuf:"fixed64,27,opt,name=powerApparentSPhase2" json:"powerApparentSPhase2,omitempty"`
	PowerApparentSPhase3              float64       `protobuf:"fixed64,28,opt,name=powerApparentSPhase3" json:"powerApparentSPhase3,omitempty"`
	PowerApparentSSum                 float64       `protobuf:"fixed64,29,opt,name=powerApparentSSum" json:"powerApparentSSum,omitempty"`
	PowerFactorPhase1                 float64       `protobuf:"fixed64,30,opt,name=powerFactorPhase1" json:"powerFactorPhase1,omitempty"`
	PowerFactorPhase2                 float64       `protobuf:"fixed64,31,opt,name=powerFactorPhase2" json:"powerFactorPhase2,omitempty"`
	PowerFactorPhase3                 float64       `protobuf:"fixed64,32,opt,name=powerFactorPhase3" json:"powerFactorPhase3,omitempty"`
	PowerFactorSum                    float64       `protobuf:"fixed64,33,opt,name=powerFactorSum" json:"powerFactorSum,omitempty"`
	PowerReactiveQPhase1              float64       `protobuf:"fixed64,34,opt,name=powerReactiveQPhase1" json:"powerReactiveQPhase1,omitempty"`
	PowerReactiveQPhase2              float64       `protobuf:"fixed64,35,opt,name=powerReactiveQPhase2" json:"powerReactiveQPhase2,omitempty"`
	PowerReactiveQPhase3              float64       `protobuf:"fixed64,36,opt,name=powerReactiveQPhase3" json:"powerReactiveQPhase3,omitempty"`
	PowerReactiveQSum                 float64       `protobuf:"fixed64,37,opt,name=powerReactiveQSum" json:"powerReactiveQSum,omitempty"`
	PowerRealPPhase1                  float64       `protobuf:"fixed64,38,opt,name=powerRealPPhase1" json:"powerRealPPhase1,omitempty"`
	PowerRealPPhase2                  float64       `protobuf:"fixed64,39,opt,name=powerRealPPhase2" json:"powerRealPPhase2,omitempty"`
	PowerRealPPhase3                  float64       `protobuf:"fixed64,40,opt,name=powerRealPPhase3" json:"powerRealPPhase3,omitempty"`
	PowerRealPSum                     float64       `protobuf:"fixed64,41,opt,name=powerRealPSum" json:"powerRealPSum,omitempty"`
	Timestamp                         uint32        `protobuf:"varint,42,opt,name=timestamp" json:"timestamp,omitempty"`
	Visible                           bool          `protobuf:"varint,43,opt,name=visible" json:"visible,omitempty"`
	VoltageAcPhase1                   float64       `protobuf:"fixed64,44,opt,name=voltageAcPhase1" json:"voltageAcPhase1,omitempty"`
	VoltageAcPhase2                   float64       `protobuf:"fixed64,45,opt,name=voltageAcPhase2" json:"voltageAcPhase2,omitempty"`
	VoltageAcPhase3                   float64       `protobuf:"fixed64,46,opt,name=voltageAcPhase3" json:"voltageAcPhase3,omitempty"`
}

func (m *CurrentDataMeter) Reset()                    { *m = CurrentDataMeter{} }
func (m *CurrentDataMeter) String() string            { return proto.CompactTextString(m) }
func (*CurrentDataMeter) ProtoMessage()               {}
func (*CurrentDataMeter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CurrentDataMeter) GetCurrentAcPhase1() float64 {
	if m != nil {
		return m.CurrentAcPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetCurrentAcPhase2() float64 {
	if m != nil {
		return m.CurrentAcPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetCurrentAcPhase3() float64 {
	if m != nil {
		return m.CurrentAcPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetCurrentAcSum() float64 {
	if m != nil {
		return m.CurrentAcSum
	}
	return 0
}

func (m *CurrentDataMeter) GetMeterDetails() *MeterDetails {
	if m != nil {
		return m.MeterDetails
	}
	return nil
}

func (m *CurrentDataMeter) GetEnable() bool {
	if m != nil {
		return m.Enable
	}
	return false
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase1Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase1Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase1Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase1Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase2Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase2Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase2Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase2Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase3Consumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase3Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcPhase3Produced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcPhase3Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcSumConsumed() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcSumConsumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyReactiveVArAcSumProduced() uint32 {
	if m != nil {
		return m.EnergyReactiveVArAcSumProduced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcMinusAbsolute() uint32 {
	if m != nil {
		return m.EnergyRealWAcMinusAbsolute
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase1Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase1Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase1Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase1Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase2Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase2Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase2Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase2Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase3Consumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase3Consumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcPhase3Produced() uint32 {
	if m != nil {
		return m.EnergyRealWAcPhase3Produced
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcSumConsumed() uint32 {
	if m != nil {
		return m.EnergyRealWAcSumConsumed
	}
	return 0
}

func (m *CurrentDataMeter) GetEnergyRealWAcSumProduced() uint32 {
	if m != nil {
		return m.EnergyRealWAcSumProduced
	}
	return 0
}

func (m *CurrentDataMeter) GetFrequencyPhaseAverage() float64 {
	if m != nil {
		return m.FrequencyPhaseAverage
	}
	return 0
}

func (m *CurrentDataMeter) GetMeterLocationCurrent() uint32 {
	if m != nil {
		return m.MeterLocationCurrent
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSPhase1() float64 {
	if m != nil {
		return m.PowerApparentSPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSPhase2() float64 {
	if m != nil {
		return m.PowerApparentSPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSPhase3() float64 {
	if m != nil {
		return m.PowerApparentSPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerApparentSSum() float64 {
	if m != nil {
		return m.PowerApparentSSum
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorPhase1() float64 {
	if m != nil {
		return m.PowerFactorPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorPhase2() float64 {
	if m != nil {
		return m.PowerFactorPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorPhase3() float64 {
	if m != nil {
		return m.PowerFactorPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerFactorSum() float64 {
	if m != nil {
		return m.PowerFactorSum
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQPhase1() float64 {
	if m != nil {
		return m.PowerReactiveQPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQPhase2() float64 {
	if m != nil {
		return m.PowerReactiveQPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQPhase3() float64 {
	if m != nil {
		return m.PowerReactiveQPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerReactiveQSum() float64 {
	if m != nil {
		return m.PowerReactiveQSum
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPPhase1() float64 {
	if m != nil {
		return m.PowerRealPPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPPhase2() float64 {
	if m != nil {
		return m.PowerRealPPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPPhase3() float64 {
	if m != nil {
		return m.PowerRealPPhase3
	}
	return 0
}

func (m *CurrentDataMeter) GetPowerRealPSum() float64 {
	if m != nil {
		return m.PowerRealPSum
	}
	return 0
}

func (m *CurrentDataMeter) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CurrentDataMeter) GetVisible() bool {
	if m != nil {
		return m.Visible
	}
	return false
}

func (m *CurrentDataMeter) GetVoltageAcPhase1() float64 {
	if m != nil {
		return m.VoltageAcPhase1
	}
	return 0
}

func (m *CurrentDataMeter) GetVoltageAcPhase2() float64 {
	if m != nil {
		return m.VoltageAcPhase2
	}
	return 0
}

func (m *CurrentDataMeter) GetVoltageAcPhase3() float64 {
	if m != nil {
		return m.VoltageAcPhase3
	}
	return 0
}

type MeterDetails struct {
	Manufacturer string `protobuf:"bytes,1,opt,name=manufacturer" json:"manufacturer,omitempty"`
	Model        string `protobuf:"bytes,2,opt,name=model" json:"model,omitempty"`
	Serial       string `protobuf:"bytes,3,opt,name=serial" json:"serial,omitempty"`
}

func (m *MeterDetails) Reset()                    { *m = MeterDetails{} }
func (m *MeterDetails) String() string            { return proto.CompactTextString(m) }
func (*MeterDetails) ProtoMessage()               {}
func (*MeterDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MeterDetails) GetManufacturer() string {
	if m != nil {
		return m.Manufacturer
	}
	return ""
}

func (m *MeterDetails) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *MeterDetails) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

type CurrenDataMeterRequest struct {
	Elements []*CurrentDataMeter `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
}

func (m *CurrenDataMeterRequest) Reset()                    { *m = CurrenDataMeterRequest{} }
func (m *CurrenDataMeterRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrenDataMeterRequest) ProtoMessage()               {}
func (*CurrenDataMeterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CurrenDataMeterRequest) GetElements() []*CurrentDataMeter {
	if m != nil {
		return m.Elements
	}
	return nil
}

type CurrenDataInverterRequest struct {
	DayEnergy   []int32 `protobuf:"varint,1,rep,packed,name=dayEnergy" json:"dayEnergy,omitempty"`
	Pac         []int32 `protobuf:"varint,2,rep,packed,name=pac" json:"pac,omitempty"`
	TotalEnergy []int32 `protobuf:"varint,3,rep,packed,name=totalEnergy" json:"totalEnergy,omitempty"`
	YearEnergy  []int32 `protobuf:"varint,4,rep,packed,name=yearEnergy" json:"yearEnergy,omitempty"`
	Timestamp   int64   `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *CurrenDataInverterRequest) Reset()                    { *m = CurrenDataInverterRequest{} }
func (m *CurrenDataInverterRequest) String() string            { return proto.CompactTextString(m) }
func (*CurrenDataInverterRequest) ProtoMessage()               {}
func (*CurrenDataInverterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CurrenDataInverterRequest) GetDayEnergy() []int32 {
	if m != nil {
		return m.DayEnergy
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetPac() []int32 {
	if m != nil {
		return m.Pac
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetTotalEnergy() []int32 {
	if m != nil {
		return m.TotalEnergy
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetYearEnergy() []int32 {
	if m != nil {
		return m.YearEnergy
	}
	return nil
}

func (m *CurrenDataInverterRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*SuccessResponse)(nil), "iot_fronius.SuccessResponse")
	proto.RegisterType((*Powerflow)(nil), "iot_fronius.Powerflow")
	proto.RegisterType((*SitePowerflow)(nil), "iot_fronius.SitePowerflow")
	proto.RegisterType((*InverterPowerflow)(nil), "iot_fronius.InverterPowerflow")
	proto.RegisterType((*OhmpilotPowerflow)(nil), "iot_fronius.OhmpilotPowerflow")
	proto.RegisterType((*CurrentDataMeter)(nil), "iot_fronius.CurrentDataMeter")
	proto.RegisterType((*MeterDetails)(nil), "iot_fronius.MeterDetails")
	proto.RegisterType((*CurrenDataMeterRequest)(nil), "iot_fronius.CurrenDataMeterRequest")
	proto.RegisterType((*CurrenDataInverterRequest)(nil), "iot_fronius.CurrenDataInverterRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Fronius service

type FroniusClient interface {
	InsertCurrentDataPowerflow(ctx context.Context, in *Powerflow, opts ...grpc.CallOption) (*SuccessResponse, error)
	InsertCurrentDataMeter(ctx context.Context, in *CurrenDataMeterRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
	InsertCurrentDataInverter(ctx context.Context, in *CurrenDataInverterRequest, opts ...grpc.CallOption) (*SuccessResponse, error)
}

type froniusClient struct {
	cc *grpc.ClientConn
}

func NewFroniusClient(cc *grpc.ClientConn) FroniusClient {
	return &froniusClient{cc}
}

func (c *froniusClient) InsertCurrentDataPowerflow(ctx context.Context, in *Powerflow, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentDataPowerflow", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *froniusClient) InsertCurrentDataMeter(ctx context.Context, in *CurrenDataMeterRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentDataMeter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *froniusClient) InsertCurrentDataInverter(ctx context.Context, in *CurrenDataInverterRequest, opts ...grpc.CallOption) (*SuccessResponse, error) {
	out := new(SuccessResponse)
	err := grpc.Invoke(ctx, "/iot_fronius.Fronius/InsertCurrentDataInverter", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Fronius service

type FroniusServer interface {
	InsertCurrentDataPowerflow(context.Context, *Powerflow) (*SuccessResponse, error)
	InsertCurrentDataMeter(context.Context, *CurrenDataMeterRequest) (*SuccessResponse, error)
	InsertCurrentDataInverter(context.Context, *CurrenDataInverterRequest) (*SuccessResponse, error)
}

func RegisterFroniusServer(s *grpc.Server, srv FroniusServer) {
	s.RegisterService(&_Fronius_serviceDesc, srv)
}

func _Fronius_InsertCurrentDataPowerflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Powerflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentDataPowerflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentDataPowerflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentDataPowerflow(ctx, req.(*Powerflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fronius_InsertCurrentDataMeter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrenDataMeterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentDataMeter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentDataMeter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentDataMeter(ctx, req.(*CurrenDataMeterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fronius_InsertCurrentDataInverter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrenDataInverterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FroniusServer).InsertCurrentDataInverter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iot_fronius.Fronius/InsertCurrentDataInverter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FroniusServer).InsertCurrentDataInverter(ctx, req.(*CurrenDataInverterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Fronius_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iot_fronius.Fronius",
	HandlerType: (*FroniusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertCurrentDataPowerflow",
			Handler:    _Fronius_InsertCurrentDataPowerflow_Handler,
		},
		{
			MethodName: "InsertCurrentDataMeter",
			Handler:    _Fronius_InsertCurrentDataMeter_Handler,
		},
		{
			MethodName: "InsertCurrentDataInverter",
			Handler:    _Fronius_InsertCurrentDataInverter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "iot-fronius.proto",
}

func init() { proto.RegisterFile("iot-fronius.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x58, 0xdd, 0x6e, 0xdb, 0x36,
	0x14, 0x86, 0xe3, 0xa4, 0x8d, 0xe9, 0xb8, 0x49, 0xd8, 0xd6, 0x65, 0xd2, 0x34, 0x73, 0xdd, 0xae,
	0xf3, 0xfa, 0x63, 0xa0, 0xd2, 0x2e, 0xb6, 0x02, 0x1b, 0xe6, 0xb6, 0x4b, 0x11, 0xa0, 0xc1, 0x3c,
	0x39, 0xd8, 0x30, 0xec, 0x62, 0xa3, 0x65, 0x26, 0x15, 0x22, 0x89, 0x1a, 0x45, 0xb9, 0xf0, 0xc3,
	0xec, 0x66, 0xb7, 0xbb, 0xdc, 0x23, 0xec, 0x31, 0xf6, 0x08, 0x7b, 0x89, 0x81, 0x14, 0x4d, 0x51,
	0xd6, 0x8f, 0x73, 0x67, 0x7e, 0xe7, 0x3b, 0x1f, 0xbf, 0x43, 0x52, 0xd2, 0xa1, 0xc1, 0xbe, 0x47,
	0xf9, 0x8b, 0x0b, 0x46, 0x43, 0x2f, 0x89, 0x87, 0x11, 0xa3, 0x9c, 0xc2, 0xb6, 0x47, 0xf9, 0xaf,
	0x0a, 0xea, 0x3f, 0x03, 0xbb, 0x93, 0xc4, 0x75, 0x49, 0x1c, 0x3b, 0x24, 0x8e, 0x68, 0x18, 0x13,
	0x88, 0xc0, 0xcd, 0x38, 0x85, 0x50, 0xa3, 0xd7, 0x18, 0x6c, 0x3b, 0xcb, 0x61, 0xff, 0xef, 0x06,
	0x68, 0x8d, 0xe9, 0x47, 0xc2, 0x2e, 0x7c, 0xfa, 0x11, 0x0e, 0xc1, 0x66, 0xec, 0x71, 0x22, 0x49,
	0x6d, 0xeb, 0x70, 0x68, 0xc8, 0x0e, 0x27, 0x1e, 0x27, 0x9a, 0xe9, 0x48, 0x1e, 0x7c, 0x05, 0xb6,
	0xbd, 0x70, 0x4e, 0x18, 0x27, 0x0c, 0x6d, 0xf4, 0x9a, 0x83, 0xb6, 0x75, 0x9c, 0xcb, 0x39, 0x55,
	0xc1, 0x2c, 0x4f, 0xf3, 0x45, 0x2e, 0xfd, 0x10, 0x44, 0x9e, 0x4f, 0x39, 0x6a, 0x96, 0xe4, 0x7e,
	0xaf, 0x82, 0x46, 0xee, 0x92, 0xdf, 0xff, 0xb7, 0x09, 0x3a, 0x39, 0x3f, 0x10, 0x82, 0xcd, 0x80,
	0xce, 0x52, 0xe7, 0x2d, 0x47, 0xfe, 0x86, 0x4f, 0xc0, 0xad, 0x29, 0xe6, 0x9c, 0xb0, 0xc5, 0x84,
	0xe3, 0x70, 0x36, 0x5d, 0xa0, 0x0d, 0x59, 0xfc, 0x0a, 0x0a, 0x8f, 0x01, 0x98, 0x62, 0xf7, 0x2a,
	0x89, 0xce, 0x84, 0x42, 0x53, 0x72, 0x0c, 0x04, 0x3e, 0x06, 0x9d, 0x48, 0x4c, 0x74, 0xc2, 0x68,
	0xf0, 0x8e, 0x79, 0x33, 0xb4, 0xd9, 0x6b, 0x0c, 0x1a, 0x4e, 0x1e, 0x84, 0x47, 0xa0, 0x25, 0x81,
	0xf7, 0x14, 0xcf, 0xd0, 0x96, 0x64, 0x64, 0x80, 0x8e, 0x8e, 0xae, 0xae, 0x12, 0x74, 0xc3, 0x88,
	0x0a, 0x00, 0xf6, 0x40, 0x5b, 0x8b, 0x8d, 0xe7, 0xe8, 0xa6, 0x8c, 0x9b, 0x10, 0xfc, 0x12, 0xdc,
	0x63, 0xc4, 0xc7, 0xdc, 0x9b, 0x93, 0x09, 0xf1, 0x2f, 0xde, 0xd0, 0x30, 0x4e, 0x82, 0x88, 0x7b,
	0x34, 0x44, 0xdb, 0xbd, 0xc6, 0xa0, 0xe3, 0x54, 0x85, 0xe1, 0x53, 0xb0, 0xb7, 0x0c, 0x8d, 0x12,
	0x4e, 0x43, 0x1a, 0x2c, 0x50, 0x4b, 0xa6, 0x14, 0x70, 0x51, 0x69, 0x40, 0xb8, 0xb0, 0xec, 0x62,
	0xa9, 0x0d, 0xe4, 0x72, 0xe6, 0x41, 0x51, 0x0b, 0x09, 0x09, 0xbb, 0x5c, 0xbc, 0xc5, 0x0b, 0xd4,
	0x4e, 0x6b, 0xd1, 0x80, 0x58, 0xcd, 0x74, 0xf0, 0x33, 0xc1, 0x0c, 0xed, 0xc8, 0xb0, 0x81, 0x88,
	0x5a, 0xd3, 0xd1, 0x39, 0xe5, 0xd8, 0x47, 0x9d, 0xb4, 0x56, 0x03, 0xea, 0xff, 0xd7, 0x00, 0xfb,
	0x85, 0x93, 0x23, 0xf2, 0xd4, 0xbe, 0x9d, 0x65, 0x1b, 0x6d, 0x42, 0x62, 0xe6, 0x19, 0x99, 0x7b,
	0x2e, 0x39, 0x5f, 0x44, 0x44, 0xee, 0x75, 0xc7, 0x31, 0x90, 0xbc, 0xef, 0x66, 0xbd, 0xef, 0xcd,
	0x75, 0xbe, 0xb7, 0x0a, 0xbe, 0x61, 0x1f, 0xec, 0xb8, 0x09, 0x63, 0x24, 0x4c, 0xcf, 0xac, 0xda,
	0xe6, 0x1c, 0x06, 0xf7, 0x40, 0x33, 0xa6, 0xae, 0xdc, 0xe1, 0x8e, 0x23, 0x7e, 0xf6, 0x29, 0xd8,
	0x2f, 0x1c, 0x75, 0x21, 0x95, 0x9e, 0x0e, 0x37, 0x9d, 0xad, 0x91, 0x4a, 0x99, 0x18, 0xbc, 0x03,
	0xb6, 0x62, 0x8e, 0x79, 0x5a, 0x69, 0xcb, 0x49, 0x07, 0xc2, 0x26, 0x27, 0x41, 0x44, 0x18, 0xe6,
	0x09, 0x23, 0xaa, 0x4c, 0x13, 0xea, 0xff, 0x73, 0x1b, 0xec, 0xbd, 0x49, 0x3d, 0xbd, 0xc5, 0x1c,
	0x9f, 0x89, 0xbd, 0x85, 0x03, 0xb0, 0xab, 0x7c, 0x8e, 0xdc, 0xf1, 0x07, 0x1c, 0x93, 0x97, 0x6a,
	0xce, 0x55, 0xb8, 0xc8, 0xb4, 0xa4, 0x81, 0x02, 0xd3, 0x2a, 0x32, 0x6d, 0x65, 0x67, 0x15, 0x36,
	0x56, 0x6e, 0xe4, 0x4e, 0x92, 0x40, 0xad, 0x7e, 0x0e, 0x83, 0x5f, 0x83, 0x1d, 0x79, 0x0c, 0xdf,
	0x12, 0x8e, 0x3d, 0x3f, 0x96, 0x1b, 0xd0, 0xb6, 0x0e, 0x72, 0xef, 0x8c, 0x33, 0x83, 0xe0, 0xe4,
	0xe8, 0xb0, 0x0b, 0x6e, 0x90, 0x10, 0x4f, 0x7d, 0x22, 0xb7, 0x65, 0xdb, 0x51, 0x23, 0xf8, 0x1e,
	0x3c, 0x4c, 0xf7, 0xd0, 0x21, 0xd8, 0x15, 0x0f, 0xc3, 0x8f, 0x23, 0xb6, 0xac, 0x35, 0x7d, 0x8c,
	0xc8, 0x4c, 0x6d, 0xd7, 0x7a, 0x62, 0xad, 0xda, 0x98, 0xd1, 0x59, 0xe2, 0x92, 0x99, 0x7a, 0x60,
	0xd7, 0x13, 0xeb, 0xd4, 0x2c, 0xed, 0xad, 0x55, 0xaf, 0x66, 0x5d, 0xc7, 0x9b, 0xa5, 0xbd, 0x81,
	0x35, 0x6a, 0xd7, 0xf1, 0x66, 0x6b, 0x6f, 0xed, 0x7a, 0x35, 0xfb, 0x3a, 0xde, 0x6c, 0xed, 0x6d,
	0x67, 0x8d, 0x9a, 0xf6, 0x76, 0x02, 0x8e, 0x4b, 0x48, 0x93, 0x24, 0xd0, 0xc6, 0x3a, 0x52, 0x6a,
	0x0d, 0xab, 0x5a, 0x47, 0x5b, 0xba, 0x55, 0xa7, 0xa3, 0xfd, 0x7c, 0x03, 0x0e, 0x35, 0xc3, 0xff,
	0x69, 0xe4, 0x9e, 0x79, 0x61, 0x12, 0x8f, 0xa6, 0x31, 0xf5, 0x13, 0x4e, 0xd0, 0xae, 0xd4, 0xa8,
	0x61, 0xc0, 0x6f, 0xc1, 0xfd, 0x5c, 0x74, 0xe5, 0x74, 0xee, 0x49, 0x81, 0x3a, 0x4a, 0x85, 0x82,
	0x2e, 0x63, 0xbf, 0x52, 0x41, 0xd7, 0x50, 0xaa, 0x90, 0x9d, 0x42, 0x58, 0xa5, 0x60, 0xd5, 0x7b,
	0xc8, 0x4e, 0xde, 0xed, 0x4a, 0x85, 0x7a, 0x0f, 0xd9, 0x69, 0xbb, 0x53, 0xa5, 0x60, 0xd7, 0x7b,
	0xc8, 0x4e, 0xd8, 0xdd, 0x4a, 0x05, 0xed, 0xe1, 0x15, 0x40, 0xb9, 0xb0, 0x79, 0xaa, 0xba, 0x32,
	0xbd, 0x32, 0x5e, 0x96, 0xab, 0xa7, 0xbe, 0x57, 0x9e, 0xab, 0xe7, 0xfd, 0x02, 0xdc, 0xbd, 0x60,
	0xe4, 0xf7, 0x84, 0x84, 0xee, 0x42, 0x5a, 0x1a, 0xcd, 0x09, 0xc3, 0x97, 0x04, 0x21, 0xf9, 0xae,
	0x2c, 0x0f, 0x42, 0x0b, 0xdc, 0xc9, 0x7d, 0xbb, 0xd5, 0x7b, 0x1f, 0x1d, 0xc8, 0xd9, 0x4a, 0x63,
	0x22, 0x27, 0xfd, 0xce, 0x44, 0x11, 0x16, 0xc0, 0x44, 0x7d, 0x0f, 0x0e, 0xe5, 0x44, 0xa5, 0xb1,
	0x8a, 0x1c, 0x0b, 0xdd, 0xaf, 0xcc, 0xb1, 0x2a, 0x72, 0x6c, 0x74, 0x54, 0x99, 0x63, 0xc3, 0xe7,
	0x60, 0x3f, 0x8f, 0x8b, 0xaf, 0xc5, 0x03, 0x99, 0x50, 0x0c, 0x68, 0xf6, 0x09, 0x76, 0x39, 0x65,
	0xaa, 0x8c, 0x63, 0x83, 0x6d, 0x06, 0xca, 0xd8, 0x16, 0xfa, 0xa4, 0x9c, 0x6d, 0x95, 0xb1, 0x6d,
	0xd4, 0x2b, 0x67, 0xdb, 0xa2, 0x15, 0x35, 0x40, 0x61, 0xfa, 0xa1, 0xa4, 0xae, 0xa0, 0x7a, 0x4d,
	0x96, 0xaf, 0x92, 0x1f, 0x94, 0xe9, 0xbe, 0xb1, 0x26, 0x2b, 0xb1, 0x8a, 0x1c, 0x0b, 0x3d, 0xaa,
	0xcc, 0xb1, 0x2a, 0x72, 0x6c, 0xf4, 0xb8, 0x32, 0x27, 0x5b, 0x7b, 0x8d, 0x8b, 0x32, 0x3e, 0x35,
	0x2a, 0x36, 0x03, 0xa2, 0xed, 0x5c, 0x82, 0xfe, 0x58, 0x55, 0xf1, 0x44, 0x92, 0x0b, 0x78, 0x09,
	0xd7, 0x42, 0x9f, 0x95, 0x72, 0xad, 0x12, 0xae, 0x8d, 0x06, 0xa5, 0x5c, 0x5b, 0x37, 0xee, 0x12,
	0x13, 0x6e, 0x3f, 0x37, 0x1a, 0xf7, 0x25, 0x28, 0xda, 0x42, 0xee, 0x05, 0x24, 0xe6, 0x38, 0x88,
	0xd0, 0x53, 0xf9, 0x60, 0x64, 0x80, 0xb8, 0x3a, 0xcd, 0xbd, 0xd8, 0x13, 0x8d, 0xc3, 0xb3, 0xf4,
	0xea, 0xa4, 0x86, 0xa2, 0xbd, 0x99, 0x53, 0x9f, 0xe3, 0x4b, 0xa2, 0x5b, 0xa6, 0xe7, 0x69, 0x7b,
	0xb3, 0x02, 0x17, 0x99, 0x16, 0x7a, 0x51, 0xc6, 0xb4, 0x8a, 0x4c, 0x1b, 0x0d, 0xcb, 0x98, 0x76,
	0xff, 0x37, 0xb0, 0x63, 0x76, 0x3b, 0xa2, 0x85, 0x0a, 0x70, 0x98, 0x5c, 0x60, 0x57, 0x34, 0x79,
	0x4c, 0xf5, 0xc7, 0x39, 0x4c, 0x74, 0x8c, 0xe2, 0x62, 0xe4, 0x2f, 0x3b, 0x46, 0x39, 0x10, 0x9d,
	0x51, 0x4c, 0x98, 0x87, 0x7d, 0xd9, 0x9d, 0xb5, 0x1c, 0x35, 0xea, 0x4f, 0x40, 0x37, 0x7d, 0x25,
	0xe8, 0x2e, 0xd1, 0x11, 0xaf, 0x98, 0x98, 0xc3, 0xaf, 0xc0, 0x36, 0xf1, 0x49, 0x40, 0x42, 0x2e,
	0xee, 0x93, 0xe2, 0xea, 0xf6, 0x20, 0xd7, 0x86, 0xad, 0x76, 0x97, 0x8e, 0xa6, 0xf7, 0xff, 0x6a,
	0x80, 0x83, 0x4c, 0x75, 0xd9, 0xe5, 0x2f, 0x85, 0x8f, 0x40, 0x6b, 0x86, 0x17, 0xdf, 0xc9, 0x77,
	0xa0, 0x54, 0xde, 0x72, 0x32, 0x40, 0xf4, 0xce, 0x11, 0x76, 0xe5, 0x45, 0x73, 0xcb, 0x11, 0x3f,
	0x65, 0xb3, 0x2b, 0x7a, 0x61, 0x95, 0xd1, 0x94, 0x11, 0x13, 0x12, 0x5d, 0xfd, 0x82, 0x60, 0xa6,
	0x08, 0x9b, 0x92, 0x60, 0x20, 0xf9, 0xcd, 0x17, 0x2d, 0x65, 0xd3, 0xd8, 0x7c, 0xeb, 0x8f, 0x0d,
	0x70, 0xf3, 0x24, 0x2d, 0x0a, 0x3a, 0xe0, 0xf0, 0x34, 0x8c, 0x09, 0xe3, 0x46, 0x75, 0x59, 0xc3,
	0xde, 0xcd, 0x2d, 0x80, 0xc6, 0x0f, 0x8f, 0xf2, 0x77, 0xe8, 0x95, 0x7b, 0xf9, 0x2f, 0xa0, 0x5b,
	0xd0, 0x4c, 0xfb, 0xf1, 0x47, 0x25, 0x0b, 0xba, 0xba, 0x0f, 0x6b, 0xc4, 0x31, 0x38, 0x28, 0x88,
	0x2f, 0x17, 0x1c, 0x3e, 0xa9, 0xd0, 0x5f, 0xd9, 0x91, 0xfa, 0x29, 0x5e, 0xbf, 0x04, 0x5d, 0x97,
	0x06, 0x43, 0x3c, 0x27, 0x97, 0x98, 0x0a, 0xe6, 0x50, 0x31, 0x5f, 0xef, 0x9e, 0x52, 0xae, 0x56,
	0x6e, 0xcc, 0x28, 0xa7, 0xe3, 0xc6, 0x9f, 0x1b, 0x4d, 0xe7, 0xfc, 0xdd, 0xf4, 0x86, 0xfc, 0xc7,
	0xc2, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xef, 0x1a, 0x0a, 0x17, 0xc6, 0x10, 0x00, 0x00,
}
